% MONITOR PART
% formula: [(not R)*. P. (not (S or R))*. R] false
% R = __sendTaskToExecutor_return
% P = pushTask
% S = popTask
act error;

act synch_call_mon:Nat#ClassType#ClassObject#Method;
act synch_call_found:Nat#ClassType#ClassObject#Method;

act synch_reply_mon:Nat#ClassType#ClassObject#Method;
act synch_reply_found:Nat#ClassType#ClassObject#Method;

act asynch_call_mon:Nat#ClassType#ClassObject#Method;
act asynch_call_found:Nat#ClassType#ClassObject#Method;

sort Action = struct 
  synch_reply_mon(id:Nat,ExecutorDispatcher:ClassType,__eDispatch:ClassObject,__sendTaskToExecutor_return:Method) |
  synch_call_mon(id:Nat,ExecutorQueues:ClassType,__queues:ClassObject,method:Method) 
  ;

  sort ActionFormula = struct action(act1:Action)  |
  and(phi1:ActionFormula,phi2:ActionFormula) | 
    or(phi1:ActionFormula,phi2:ActionFormula) | 
			    not(ActionFormula) |
			    Forall(ActionFormula) |
			    Exists(ActionFormula) |
                            True;
 
map satisfy:  Action # ActionFormula -> Bool;
var c1,c2:Action;
  f,g:ActionFormula;
  method1,method2:Method;
eqn
    satisfy(c1,action(c2)) = c1 == c2; 
    satisfy(c1,and(f,g)) = satisfy(c1,f) && satisfy(c1,g);
    satisfy(c1,not(f)) = !satisfy(c1,f);
    satisfy(c1,or(f,g)) = satisfy(c1,f) || satisfy(c1,g);
    satisfy(c1,True) = true;

  proc Proc_alpha1(taskId:Nat) =
		satisfy(synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0)), 
		not(action(synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0))))
		) -> synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0))

		+ satisfy(synch_call_mon(1,ExecutorQueues,__queues,pushTask(JobPath,taskId,false)),
		not(action(synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0))))
		) -> synch_call_mon(1,ExecutorQueues,__queues,pushTask(JobPath,taskId,false))
				  
		+ satisfy(synch_call_mon(1,ExecutorQueues,__queues,popTask([JobPath])),
		not(action(synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0))))
		) -> synch_call_mon(1,ExecutorQueues,__queues,popTask([JobPath]))
		;

proc Proc_alpha2(taskId:Nat) =  
		
		satisfy(synch_call_mon(1,ExecutorQueues,__queues,pushTask(JobPath,taskId,false))
		,not(or	(action(synch_call_mon(1,ExecutorQueues,__queues,popTask([JobPath]))),action(synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0)))))
		) -> synch_call_mon(1,ExecutorQueues,__queues,pushTask(JobPath,taskId,false))
		
		+
		
		satisfy(synch_call_mon(1,ExecutorQueues,__queues,popTask([JobPath]))
		,not(or	(action(synch_call_mon(1,ExecutorQueues,__queues,popTask([JobPath]))),action(synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0)))))
		) -> synch_call_mon(1,ExecutorQueues,__queues,popTask([JobPath]))
		
		+
		
		satisfy(synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0))
		,not(or	(action(synch_call_mon(1,ExecutorQueues,__queues,popTask([JobPath]))),action(synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0)))))
		) -> synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0))
		
;

		   
		   
proc Proc_R = synch_reply_mon(1,ExecutorDispatcher,__eDispatch,__sendTaskToExecutor_return(OK,0));
proc Proc_P(taskId:Nat) = synch_call_mon(1,ExecutorQueues,__queues,pushTask(JobPath,taskId,false));
proc Proc_S = synch_call_mon(1,ExecutorQueues,__queues,popTask([JobPath]));

proc Proc_alpha2_star(taskId:Nat) = internal + Proc_alpha2_plus(taskId);
proc Proc_alpha1_star(taskId:Nat) = internal + Proc_alpha1_plus(taskId);
proc Proc_alpha2_plus(taskId:Nat) =   Proc_alpha2(taskId).Proc_alpha2_plus(taskId) + Proc_alpha2(taskId);
proc Proc_alpha1_plus(taskId:Nat) =   Proc_alpha1(taskId).Proc_alpha1_plus(taskId) + Proc_alpha1(taskId);

proc Proc_monitor = sum taskId:Nat.Proc_alpha1_star(taskId).Proc_P(taskId).Proc_alpha2_star(taskId).Proc_R.error;

% END-MONITOR PART
